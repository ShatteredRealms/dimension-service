// Code generated by MockGen. DO NOT EDIT.
// Source: /home/wil/dev/sro/gamesever-service/pkg/pb/map_grpc.pb.go
//
// Generated by this command:
//
//	mockgen -package=mocks -source=/home/wil/dev/sro/gamesever-service/pkg/pb/map_grpc.pb.go -destination=/home/wil/dev/sro/gamesever-service/pkg/mocks/map_grpc.pb_mock.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	pb "github.com/ShatteredRealms/gameserver-service/pkg/pb"
	pb0 "github.com/ShatteredRealms/go-common-service/pkg/pb"
	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// MockMapServiceClient is a mock of MapServiceClient interface.
type MockMapServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockMapServiceClientMockRecorder
	isgomock struct{}
}

// MockMapServiceClientMockRecorder is the mock recorder for MockMapServiceClient.
type MockMapServiceClientMockRecorder struct {
	mock *MockMapServiceClient
}

// NewMockMapServiceClient creates a new mock instance.
func NewMockMapServiceClient(ctrl *gomock.Controller) *MockMapServiceClient {
	mock := &MockMapServiceClient{ctrl: ctrl}
	mock.recorder = &MockMapServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMapServiceClient) EXPECT() *MockMapServiceClientMockRecorder {
	return m.recorder
}

// CreateMap mocks base method.
func (m *MockMapServiceClient) CreateMap(ctx context.Context, in *pb.CreateMapRequest, opts ...grpc.CallOption) (*pb.Map, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateMap", varargs...)
	ret0, _ := ret[0].(*pb.Map)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMap indicates an expected call of CreateMap.
func (mr *MockMapServiceClientMockRecorder) CreateMap(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMap", reflect.TypeOf((*MockMapServiceClient)(nil).CreateMap), varargs...)
}

// DeleteMap mocks base method.
func (m *MockMapServiceClient) DeleteMap(ctx context.Context, in *pb0.TargetId, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteMap", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteMap indicates an expected call of DeleteMap.
func (mr *MockMapServiceClientMockRecorder) DeleteMap(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMap", reflect.TypeOf((*MockMapServiceClient)(nil).DeleteMap), varargs...)
}

// EditMap mocks base method.
func (m *MockMapServiceClient) EditMap(ctx context.Context, in *pb.EditMapRequest, opts ...grpc.CallOption) (*pb.Map, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "EditMap", varargs...)
	ret0, _ := ret[0].(*pb.Map)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EditMap indicates an expected call of EditMap.
func (mr *MockMapServiceClientMockRecorder) EditMap(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditMap", reflect.TypeOf((*MockMapServiceClient)(nil).EditMap), varargs...)
}

// GetMap mocks base method.
func (m *MockMapServiceClient) GetMap(ctx context.Context, in *pb0.TargetId, opts ...grpc.CallOption) (*pb.Map, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetMap", varargs...)
	ret0, _ := ret[0].(*pb.Map)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMap indicates an expected call of GetMap.
func (mr *MockMapServiceClientMockRecorder) GetMap(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMap", reflect.TypeOf((*MockMapServiceClient)(nil).GetMap), varargs...)
}

// GetMaps mocks base method.
func (m *MockMapServiceClient) GetMaps(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*pb.Maps, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetMaps", varargs...)
	ret0, _ := ret[0].(*pb.Maps)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMaps indicates an expected call of GetMaps.
func (mr *MockMapServiceClientMockRecorder) GetMaps(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMaps", reflect.TypeOf((*MockMapServiceClient)(nil).GetMaps), varargs...)
}

// MockMapServiceServer is a mock of MapServiceServer interface.
type MockMapServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockMapServiceServerMockRecorder
	isgomock struct{}
}

// MockMapServiceServerMockRecorder is the mock recorder for MockMapServiceServer.
type MockMapServiceServerMockRecorder struct {
	mock *MockMapServiceServer
}

// NewMockMapServiceServer creates a new mock instance.
func NewMockMapServiceServer(ctrl *gomock.Controller) *MockMapServiceServer {
	mock := &MockMapServiceServer{ctrl: ctrl}
	mock.recorder = &MockMapServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMapServiceServer) EXPECT() *MockMapServiceServerMockRecorder {
	return m.recorder
}

// CreateMap mocks base method.
func (m *MockMapServiceServer) CreateMap(arg0 context.Context, arg1 *pb.CreateMapRequest) (*pb.Map, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMap", arg0, arg1)
	ret0, _ := ret[0].(*pb.Map)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMap indicates an expected call of CreateMap.
func (mr *MockMapServiceServerMockRecorder) CreateMap(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMap", reflect.TypeOf((*MockMapServiceServer)(nil).CreateMap), arg0, arg1)
}

// DeleteMap mocks base method.
func (m *MockMapServiceServer) DeleteMap(arg0 context.Context, arg1 *pb0.TargetId) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMap", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteMap indicates an expected call of DeleteMap.
func (mr *MockMapServiceServerMockRecorder) DeleteMap(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMap", reflect.TypeOf((*MockMapServiceServer)(nil).DeleteMap), arg0, arg1)
}

// EditMap mocks base method.
func (m *MockMapServiceServer) EditMap(arg0 context.Context, arg1 *pb.EditMapRequest) (*pb.Map, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditMap", arg0, arg1)
	ret0, _ := ret[0].(*pb.Map)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EditMap indicates an expected call of EditMap.
func (mr *MockMapServiceServerMockRecorder) EditMap(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditMap", reflect.TypeOf((*MockMapServiceServer)(nil).EditMap), arg0, arg1)
}

// GetMap mocks base method.
func (m *MockMapServiceServer) GetMap(arg0 context.Context, arg1 *pb0.TargetId) (*pb.Map, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMap", arg0, arg1)
	ret0, _ := ret[0].(*pb.Map)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMap indicates an expected call of GetMap.
func (mr *MockMapServiceServerMockRecorder) GetMap(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMap", reflect.TypeOf((*MockMapServiceServer)(nil).GetMap), arg0, arg1)
}

// GetMaps mocks base method.
func (m *MockMapServiceServer) GetMaps(arg0 context.Context, arg1 *emptypb.Empty) (*pb.Maps, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMaps", arg0, arg1)
	ret0, _ := ret[0].(*pb.Maps)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMaps indicates an expected call of GetMaps.
func (mr *MockMapServiceServerMockRecorder) GetMaps(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMaps", reflect.TypeOf((*MockMapServiceServer)(nil).GetMaps), arg0, arg1)
}

// mustEmbedUnimplementedMapServiceServer mocks base method.
func (m *MockMapServiceServer) mustEmbedUnimplementedMapServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedMapServiceServer")
}

// mustEmbedUnimplementedMapServiceServer indicates an expected call of mustEmbedUnimplementedMapServiceServer.
func (mr *MockMapServiceServerMockRecorder) mustEmbedUnimplementedMapServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedMapServiceServer", reflect.TypeOf((*MockMapServiceServer)(nil).mustEmbedUnimplementedMapServiceServer))
}

// MockUnsafeMapServiceServer is a mock of UnsafeMapServiceServer interface.
type MockUnsafeMapServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeMapServiceServerMockRecorder
	isgomock struct{}
}

// MockUnsafeMapServiceServerMockRecorder is the mock recorder for MockUnsafeMapServiceServer.
type MockUnsafeMapServiceServerMockRecorder struct {
	mock *MockUnsafeMapServiceServer
}

// NewMockUnsafeMapServiceServer creates a new mock instance.
func NewMockUnsafeMapServiceServer(ctrl *gomock.Controller) *MockUnsafeMapServiceServer {
	mock := &MockUnsafeMapServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeMapServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeMapServiceServer) EXPECT() *MockUnsafeMapServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedMapServiceServer mocks base method.
func (m *MockUnsafeMapServiceServer) mustEmbedUnimplementedMapServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedMapServiceServer")
}

// mustEmbedUnimplementedMapServiceServer indicates an expected call of mustEmbedUnimplementedMapServiceServer.
func (mr *MockUnsafeMapServiceServerMockRecorder) mustEmbedUnimplementedMapServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedMapServiceServer", reflect.TypeOf((*MockUnsafeMapServiceServer)(nil).mustEmbedUnimplementedMapServiceServer))
}
