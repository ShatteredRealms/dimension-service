// Code generated by MockGen. DO NOT EDIT.
// Source: /home/wil/dev/sro/gamesever-service/pkg/service/gameserver.go
//
// Generated by this command:
//
//	mockgen -package=mocks -source=/home/wil/dev/sro/gamesever-service/pkg/service/gameserver.go -destination=/home/wil/dev/sro/gamesever-service/pkg/mocks/gameserver_mock.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	v1 "agones.dev/agones/pkg/apis/allocation/v1"
	game "github.com/ShatteredRealms/gameserver-service/pkg/model/game"
	gomock "go.uber.org/mock/gomock"
)

// MockGameServerManagerService is a mock of GameServerManagerService interface.
type MockGameServerManagerService struct {
	ctrl     *gomock.Controller
	recorder *MockGameServerManagerServiceMockRecorder
	isgomock struct{}
}

// MockGameServerManagerServiceMockRecorder is the mock recorder for MockGameServerManagerService.
type MockGameServerManagerServiceMockRecorder struct {
	mock *MockGameServerManagerService
}

// NewMockGameServerManagerService creates a new mock instance.
func NewMockGameServerManagerService(ctrl *gomock.Controller) *MockGameServerManagerService {
	mock := &MockGameServerManagerService{ctrl: ctrl}
	mock.recorder = &MockGameServerManagerServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGameServerManagerService) EXPECT() *MockGameServerManagerServiceMockRecorder {
	return m.recorder
}

// DimensionMapChanged mocks base method.
func (m_2 *MockGameServerManagerService) DimensionMapChanged(dimension *game.Dimension, m *game.Map, created bool) {
	m_2.ctrl.T.Helper()
	m_2.ctrl.Call(m_2, "DimensionMapChanged", dimension, m, created)
}

// DimensionMapChanged indicates an expected call of DimensionMapChanged.
func (mr *MockGameServerManagerServiceMockRecorder) DimensionMapChanged(dimension, m, created any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DimensionMapChanged", reflect.TypeOf((*MockGameServerManagerService)(nil).DimensionMapChanged), dimension, m, created)
}

// RequestConnection mocks base method.
func (m *MockGameServerManagerService) RequestConnection(ctx context.Context, characterId, dimensionId, mapId string) (*v1.GameServerAllocation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RequestConnection", ctx, characterId, dimensionId, mapId)
	ret0, _ := ret[0].(*v1.GameServerAllocation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RequestConnection indicates an expected call of RequestConnection.
func (mr *MockGameServerManagerServiceMockRecorder) RequestConnection(ctx, characterId, dimensionId, mapId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequestConnection", reflect.TypeOf((*MockGameServerManagerService)(nil).RequestConnection), ctx, characterId, dimensionId, mapId)
}

// Start mocks base method.
func (m *MockGameServerManagerService) Start(ctx context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Start", ctx)
}

// Start indicates an expected call of Start.
func (mr *MockGameServerManagerServiceMockRecorder) Start(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockGameServerManagerService)(nil).Start), ctx)
}

// Stop mocks base method.
func (m *MockGameServerManagerService) Stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop.
func (mr *MockGameServerManagerServiceMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockGameServerManagerService)(nil).Stop))
}
